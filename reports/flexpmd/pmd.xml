<?xml version="1.0" encoding="UTF-8"?>
<pmd version="4.2.1" timestamp="Mon Dec 21 18:29:49 EST 2009">
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/adapters/AMFAdapter.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.adapters" class="AMFAdapter.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/adapters/AdapterBase.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.adapters" class="AdapterBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/com/company/project/App.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="com.company.project" class="App.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/net/Asset.as">
      <violation beginline="18" endline="18" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="19" endline="19" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="22" endline="22" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="23" endline="23" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="99" endline="99" begincolumn="45" endcolumn="45" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 21 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 19 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 22 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="25" endline="25" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.AvoidUsingPublicStaticField" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">If this field (BLOCK_SIZE) was meant to be a constant, make it constant. Otherwise, if it is used as a global variable, you may want to redesign this class</violation>
      <violation beginline="29" endline="29" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_variableNames). 
        </violation>
      <violation beginline="30" endline="30" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_fileNames). 
        </violation>
      <violation beginline="37" endline="37" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (requestHeaders). 
        </violation>
      <violation beginline="50" endline="50" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 6 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="50" endline="50" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="183" endline="183" begincolumn="6" endcolumn="6" rule="adobe.ac.pmd.rules.empty.EmptyIfStmt" ruleset="Empty statement Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">No statements in this if statement. Empty If Statement finds instances where a condition is checked but nothing is done about it. </violation>
      <violation beginline="244" endline="244" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">This variable (i) is not used. 
      </violation>
      <violation beginline="245" endline="245" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">This variable (bytes) is not used. 
      </violation>
      <violation beginline="295" endline="295" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 22 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="82" endline="82" begincolumn="0" endcolumn="50" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="216" endline="216" begincolumn="0" endcolumn="14" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="244" endline="244" begincolumn="0" endcolumn="14" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="268" endline="268" begincolumn="0" endcolumn="14" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="297" endline="297" begincolumn="0" endcolumn="14" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="363" endline="363" begincolumn="0" endcolumn="36" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Asset.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/net/Assets.as">
      <violation beginline="88" endline="88" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="113" endline="113" begincolumn="130" endcolumn="130" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="244" endline="244" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="262" endline="262" begincolumn="28" endcolumn="28" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="280" endline="280" begincolumn="46" endcolumn="46" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="1">This parameter (index) of this function is not used. 
      </violation>
      <violation beginline="280" endline="280" begincolumn="57" endcolumn="57" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="1">This parameter (arr) of this function is not used. 
      </violation>
      <violation beginline="12" endline="12" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 16 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="12" endline="12" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 13 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="25" endline="25" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_jobs). 
        </violation>
      <violation beginline="30" endline="30" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_loaders). 
        </violation>
      <violation beginline="34" endline="34" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_speedChecks). 
        </violation>
      <violation beginline="49" endline="49" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="113" endline="113" begincolumn="28" endcolumn="28" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="42" endline="42" begincolumn="0" endcolumn="33" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="43" endline="43" begincolumn="0" endcolumn="30" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.net" class="Assets.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/net/AssetsGroup.as">
      <violation beginline="21" endline="21" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="AssetsGroup.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="39" endline="39" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="AssetsGroup.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="AssetsGroup.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_loading). 
        </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.net" class="AssetsGroup.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/tags/AudioTag.as">
      <violation beginline="26" endline="26" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="1">This private attribute (target) does not seem to be used. 
      </violation>
      <violation beginline="26" endline="26" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="27" endline="27" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="27" endline="27" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="1">This private attribute (data) does not seem to be used. 
      </violation>
      <violation beginline="31" endline="31" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="1">This private attribute (w) does not seem to be used. 
      </violation>
      <violation beginline="32" endline="32" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="1">This private attribute (h) does not seem to be used. 
      </violation>
      <violation beginline="145" endline="145" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="1">This private method (pause) does not seem to be used. 
      </violation>
      <violation beginline="12" endline="12" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 11 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="12" endline="12" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 18 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="31" endline="31" begincolumn="0" endcolumn="20" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="32" endline="32" begincolumn="0" endcolumn="20" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="43" endline="43" begincolumn="0" endcolumn="21" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="AudioTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/Base.as">
      <violation beginline="78" endline="78" begincolumn="0" endcolumn="45" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="Base.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="27" endline="27" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.display" class="Base.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 2 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="52" endline="52" begincolumn="45" endcolumn="45" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.display" class="Base.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display" class="Base.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/tags/BasicTags.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="65" endline="65" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="74" endline="74" begincolumn="0" endcolumn="303" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 303 actually). </violation>
      <violation beginline="75" endline="75" begincolumn="0" endcolumn="330" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 330 actually). </violation>
      <violation beginline="108" endline="108" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="127" endline="127" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="144" endline="144" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="158" endline="158" begincolumn="0" endcolumn="307" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 307 actually). </violation>
      <violation beginline="182" endline="182" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="198" endline="198" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="215" endline="215" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="242" endline="242" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="284" endline="284" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="304" endline="304" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="320" endline="320" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="338" endline="338" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
      <violation beginline="361" endline="361" begincolumn="0" endcolumn="356" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html.tags" class="BasicTags.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 356 actually). </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/graphics/Border.as">
      <violation beginline="13" endline="13" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Border.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="13" endline="13" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.graphics" class="Border.as" externalInfoUrl="" priority="1">This parameter (element) of this function is not used. 
      </violation>
      <violation beginline="13" endline="13" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.graphics" class="Border.as" externalInfoUrl="" priority="1">This parameter (style) of this function is not used. 
      </violation>
      <violation beginline="17" endline="17" begincolumn="42" endcolumn="42" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Border.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="23" endline="23" begincolumn="52" endcolumn="52" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Border.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display.graphics" class="Border.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="27" endline="27" begincolumn="0" endcolumn="204" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display.graphics" class="Border.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 204 actually). </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/tags/CDataTags.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html.tags" class="CDataTags.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/CSS.as">
      <violation beginline="16" endline="16" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="17" endline="17" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="18" endline="18" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="19" endline="19" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="23" endline="23" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="133" endline="133" begincolumn="69" endcolumn="69" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="135" endline="135" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="137" endline="137" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="217" endline="217" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="255" endline="255" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="298" endline="298" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="320" endline="320" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="353" endline="353" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="385" endline="385" begincolumn="153" endcolumn="153" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="430" endline="430" begincolumn="109" endcolumn="109" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="435" endline="435" begincolumn="16" endcolumn="16" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="441" endline="441" begincolumn="95" endcolumn="95" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="441" endline="441" begincolumn="57" endcolumn="57" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This parameter (stylePart) of this function is not used. 
      </violation>
      <violation beginline="446" endline="446" begincolumn="93" endcolumn="93" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="446" endline="446" begincolumn="55" endcolumn="55" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This parameter (stylePart) of this function is not used. 
      </violation>
      <violation beginline="451" endline="451" begincolumn="45" endcolumn="45" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="491" endline="491" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="504" endline="504" begincolumn="119" endcolumn="119" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="504" endline="504" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="504" endline="504" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This parameter (styleObject) of this function is not used. 
      </violation>
      <violation beginline="504" endline="504" begincolumn="84" endcolumn="84" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="507" endline="507" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="540" endline="540" begincolumn="80" endcolumn="80" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="540" endline="540" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This private method (cleanBackground) does not seem to be used. 
      </violation>
      <violation beginline="540" endline="540" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This parameter (name) of this function is not used. 
      </violation>
      <violation beginline="542" endline="542" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="608" endline="608" begincolumn="44" endcolumn="44" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="610" endline="610" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="646" endline="646" begincolumn="76" endcolumn="76" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="646" endline="646" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This private method (cleanBorder) does not seem to be used. 
      </violation>
      <violation beginline="646" endline="646" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This parameter (name) of this function is not used. 
      </violation>
      <violation beginline="648" endline="648" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="679" endline="679" begincolumn="76" endcolumn="76" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="679" endline="679" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This private method (cleanMargin) does not seem to be used. 
      </violation>
      <violation beginline="679" endline="679" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This parameter (name) of this function is not used. 
      </violation>
      <violation beginline="701" endline="701" begincolumn="77" endcolumn="77" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="701" endline="701" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This private method (cleanPadding) does not seem to be used. 
      </violation>
      <violation beginline="701" endline="701" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">This parameter (name) of this function is not used. 
      </violation>
      <violation beginline="721" endline="721" begincolumn="52" endcolumn="52" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="721" endline="721" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="723" endline="723" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="745" endline="745" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="750" endline="750" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 19 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 7 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="42" endline="42" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (INHERITED_STYLES). 
        </violation>
      <violation beginline="92" endline="92" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.empty.EmptyCatchStatement" ruleset="Empty statement Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">This catch statement is empty</violation>
      <violation beginline="133" endline="133" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 64 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="133" endline="133" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 53</violation>
      <violation beginline="222" endline="222" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="222" endline="222" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="226" endline="226" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="226" endline="226" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="237" endline="237" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="345" endline="345" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="Naming Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it</violation>
      <violation beginline="385" endline="385" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 6 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="385" endline="385" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 14</violation>
      <violation beginline="389" endline="389" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">This variable (nodeName) is not used. 
      </violation>
      <violation beginline="414" endline="414" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="504" endline="504" begincolumn="31" endcolumn="31" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="540" endline="540" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 19</violation>
      <violation beginline="549" endline="549" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="549" endline="549" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="567" endline="567" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="567" endline="567" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="573" endline="573" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="573" endline="573" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="579" endline="579" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="579" endline="579" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="648" endline="648" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">This variable (__border) is not used. 
      </violation>
      <violation beginline="664" endline="664" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="664" endline="664" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="670" endline="670" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="670" endline="670" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="698" endline="698" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="717" endline="717" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="6" endline="6" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.style.ImportFromSamePackage" ruleset="Style Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="5">Imports from the same package are not necessary. </violation>
      <violation beginline="180" endline="180" begincolumn="0" endcolumn="32" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="278" endline="278" begincolumn="0" endcolumn="20" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="507" endline="507" begincolumn="0" endcolumn="21" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="682" endline="682" begincolumn="0" endcolumn="35" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="704" endline="704" begincolumn="0" endcolumn="35" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html" class="CSS.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/adapters/CSVAdapter.as">
      <violation beginline="120" endline="120" begincolumn="0" endcolumn="53" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.model.adapters" class="CSVAdapter.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.adapters" class="CSVAdapter.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/cache/Cache.as">
      <violation beginline="6" endline="6" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.DynamicClass" ruleset="Maintanability Rules" package="framework.cache" class="Cache.as" externalInfoUrl="" priority="1">A class must not be dynamic. When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult</violation>
      <violation beginline="13" endline="13" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.cache" class="Cache.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="13" endline="13" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.cache" class="Cache.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 2 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.cache" class="Cache.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/com/company/project/model/Character.as">
      <violation beginline="6" endline="6" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.DynamicClass" ruleset="Maintanability Rules" package="com.company.project.model" class="Character.as" externalInfoUrl="" priority="1">A class must not be dynamic. When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult</violation>
      <violation beginline="10" endline="10" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.model" class="Character.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="com.company.project.model" class="Character.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/controller/Controller.as">
      <violation beginline="33" endline="33" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="41" endline="41" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="42" endline="42" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="50" endline="50" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="105" endline="105" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="152" endline="152" begincolumn="43" endcolumn="43" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="164" endline="164" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="354" endline="354" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="15" endline="15" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 14 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="15" endline="15" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 11 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="15" endline="15" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 18 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="51" endline="51" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_pathParts). 
        </violation>
      <violation beginline="61" endline="61" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="164" endline="164" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 41 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="164" endline="164" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 29</violation>
      <violation beginline="319" endline="319" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 24 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="319" endline="319" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 15</violation>
      <violation beginline="319" endline="319" begincolumn="46" endcolumn="46" rule="adobe.ac.pmd.rules.naming.WronglyNamedVariable" ruleset="Naming Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">This variable (temp) seems to be incorrectly named. Let your creativity flow</violation>
      <violation beginline="331" endline="331" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="331" endline="331" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having '!condition'</violation>
      <violation beginline="345" endline="345" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="345" endline="345" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="352" endline="352" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="61" endline="61" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.style.ConstructorNonEmptyReturnType" ruleset="Style Rules" package="framework.controller" class="Controller.as" externalInfoUrl="" priority="5">A constructor should not have a return type. Even if this is syntactically correct, there should not be a return type for a constructor</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/controller/ControllerBase.as">
      <violation beginline="107" endline="107" begincolumn="0" endcolumn="73" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="Event Rules" package="framework.controller" class="ControllerBase.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="113" endline="113" begincolumn="0" endcolumn="60" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="Event Rules" package="framework.controller" class="ControllerBase.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="225" endline="225" begincolumn="0" endcolumn="45" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.controller" class="ControllerBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.controller" class="ControllerBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="20" endline="20" begincolumn="0" endcolumn="30" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.controller" class="ControllerBase.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/events/ControllerEvent.as">
      <violation beginline="10" endline="10" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.events" class="ControllerEvent.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="12" endline="12" begincolumn="62" endcolumn="62" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.events" class="ControllerEvent.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="12" endline="12" begincolumn="62" endcolumn="62" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.events" class="ControllerEvent.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="9" endline="9" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.event.PublicVariableInCustomEvent" ruleset="Event Rules" package="framework.events" class="ControllerEvent.as" externalInfoUrl="" priority="3">No public variables should be inside a custom event. This variable (path) is public. In order to improve encapsulation in your custom event, it is better not to have public variable in your event. Prefer having read-only attributes, set by the event constructor</violation>
      <violation beginline="10" endline="10" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.event.PublicVariableInCustomEvent" ruleset="Event Rules" package="framework.events" class="ControllerEvent.as" externalInfoUrl="" priority="3">No public variables should be inside a custom event. This variable (params) is public. In order to improve encapsulation in your custom event, it is better not to have public variable in your event. Prefer having read-only attributes, set by the event constructor</violation>
      <violation beginline="12" endline="12" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.events" class="ControllerEvent.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.events" class="ControllerEvent.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/DisplayObjectBase.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display" class="DisplayObjectBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Document.as">
      <violation beginline="12" endline="12" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="32" endline="32" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="35" endline="35" begincolumn="41" endcolumn="41" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="45" endline="45" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="50" endline="50" begincolumn="31" endcolumn="31" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="73" endline="73" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="93" endline="93" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">This parameter (id) of this function is not used. 
      </violation>
      <violation beginline="99" endline="99" begincolumn="43" endcolumn="43" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">This parameter (id) of this function is not used. 
      </violation>
      <violation beginline="105" endline="105" begincolumn="41" endcolumn="41" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">This parameter (name) of this function is not used. 
      </violation>
      <violation beginline="110" endline="110" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">This parameter (domVersion) of this function is not used. 
      </violation>
      <violation beginline="117" endline="117" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">This parameter (name) of this function is not used. 
      </violation>
      <violation beginline="127" endline="127" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="1">This parameter (content) of this function is not used. 
      </violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 22 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 17 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="11" endline="11" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (anchors). 
        </violation>
      <violation beginline="13" endline="13" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (images). 
        </violation>
      <violation beginline="14" endline="14" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (embeds). 
        </violation>
      <violation beginline="15" endline="15" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (forms). 
        </violation>
      <violation beginline="16" endline="16" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (layers). 
        </violation>
      <violation beginline="17" endline="17" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (links). 
        </violation>
      <violation beginline="18" endline="18" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (styleSheets). 
        </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="17" endline="17" begincolumn="0" endcolumn="203" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.view.html" class="Document.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 203 actually). </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Element.as">
      <violation beginline="37" endline="37" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="56" endline="56" begincolumn="16" endcolumn="16" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="65" endline="65" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">This parameter (index) of this function is not used. 
      </violation>
      <violation beginline="65" endline="65" begincolumn="58" endcolumn="58" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">This parameter (array) of this function is not used. 
      </violation>
      <violation beginline="65" endline="65" begincolumn="71" endcolumn="71" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="105" endline="105" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="109" endline="109" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.EmptyPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">This private method (updateText) is used but its content is empty. 
      </violation>
      <violation beginline="115" endline="115" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.EmptyPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">This private method (updateScroll) is used but its content is empty. 
      </violation>
      <violation beginline="115" endline="115" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="1">This private method (updateScroll) does not seem to be used. 
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Element.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/ElementBase.as">
      <violation beginline="156" endline="156" begincolumn="0" endcolumn="44" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="166" endline="166" begincolumn="0" endcolumn="43" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="169" endline="169" begincolumn="0" endcolumn="40" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="218" endline="218" begincolumn="0" endcolumn="40" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="453" endline="453" begincolumn="0" endcolumn="43" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="473" endline="473" begincolumn="0" endcolumn="42" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="481" endline="481" begincolumn="0" endcolumn="43" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="484" endline="484" begincolumn="0" endcolumn="49" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="495" endline="495" begincolumn="0" endcolumn="33" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="496" endline="496" begincolumn="0" endcolumn="34" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="ElementBase.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/styles/ElementStyles.as">
      <violation beginline="48" endline="48" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="73" endline="73" begincolumn="112" endcolumn="112" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="73" endline="73" begincolumn="56" endcolumn="56" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="77" endline="77" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="93" endline="93" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="184" endline="184" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="230" endline="230" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="281" endline="281" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="298" endline="298" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="329" endline="329" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="358" endline="358" begincolumn="153" endcolumn="153" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="402" endline="402" begincolumn="109" endcolumn="109" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="407" endline="407" begincolumn="16" endcolumn="16" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="413" endline="413" begincolumn="95" endcolumn="95" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="413" endline="413" begincolumn="57" endcolumn="57" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">This parameter (stylePart) of this function is not used. 
      </violation>
      <violation beginline="418" endline="418" begincolumn="93" endcolumn="93" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="418" endline="418" begincolumn="55" endcolumn="55" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">This parameter (stylePart) of this function is not used. 
      </violation>
      <violation beginline="423" endline="423" begincolumn="43" endcolumn="43" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="24" endline="24" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (INHERITED_STYLES). 
        </violation>
      <violation beginline="73" endline="73" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 45 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="73" endline="73" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 60</violation>
      <violation beginline="189" endline="189" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="189" endline="189" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="194" endline="194" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="194" endline="194" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="205" endline="205" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="205" endline="205" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="206" endline="206" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="206" endline="206" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="206" endline="206" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.empty.EmptyIfStmt" ruleset="Empty statement Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">No statements in this if statement. Empty If Statement finds instances where a condition is checked but nothing is done about it. </violation>
      <violation beginline="320" endline="320" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="Naming Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it</violation>
      <violation beginline="358" endline="358" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 6 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="358" endline="358" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 14</violation>
      <violation beginline="362" endline="362" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">This variable (nodeName) is not used. 
      </violation>
      <violation beginline="386" endline="386" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="142" endline="142" begincolumn="0" endcolumn="32" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="223" endline="223" begincolumn="0" endcolumn="220" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 220 actually). </violation>
      <violation beginline="253" endline="253" begincolumn="0" endcolumn="20" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="298" endline="298" begincolumn="0" endcolumn="251" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 251 actually). </violation>
      <violation beginline="425" endline="425" begincolumn="0" endcolumn="37" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.styles" class="ElementStyles.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/utils/ExtendedArray.as">
      <violation beginline="15" endline="15" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.maintanability.DynamicClass" ruleset="Maintanability Rules" package="framework.utils" class="ExtendedArray.as" externalInfoUrl="" priority="1">A class must not be dynamic. When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult</violation>
      <violation beginline="117" endline="117" begincolumn="0" endcolumn="56" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.utils" class="ExtendedArray.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="15" endline="15" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.utils" class="ExtendedArray.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 12 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="23" endline="23" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.utils" class="ExtendedArray.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 2 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="128" endline="128" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.utils" class="ExtendedArray.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.utils" class="ExtendedArray.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/graphics/Fill.as">
      <violation beginline="13" endline="13" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Fill.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="13" endline="13" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.graphics" class="Fill.as" externalInfoUrl="" priority="1">This parameter (element) of this function is not used. 
      </violation>
      <violation beginline="13" endline="13" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.graphics" class="Fill.as" externalInfoUrl="" priority="1">This parameter (style) of this function is not used. 
      </violation>
      <violation beginline="15" endline="15" begincolumn="49" endcolumn="49" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Fill.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="23" endline="23" begincolumn="52" endcolumn="52" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Fill.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="23" endline="23" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.display.graphics" class="Fill.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 15</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display.graphics" class="Fill.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/filters/FilterBase.as">
      <violation beginline="9" endline="9" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.filters" class="FilterBase.as" externalInfoUrl="" priority="1">This parameter (target) of this function is not used. 
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display.filters" class="FilterBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/graphics/Filters.as">
      <violation beginline="18" endline="18" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="18" endline="18" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">This parameter (target) of this function is not used. 
      </violation>
      <violation beginline="18" endline="18" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">This parameter (filters) of this function is not used. 
      </violation>
      <violation beginline="32" endline="32" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="35" endline="35" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="38" endline="38" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="41" endline="41" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="44" endline="44" begincolumn="39" endcolumn="39" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="8" endline="8" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.style.ImportFromSamePackage" ruleset="Style Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="5">Imports from the same package are not necessary. </violation>
      <violation beginline="33" endline="33" begincolumn="0" endcolumn="219" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display.graphics" class="Filters.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 219 actually). </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/tags/ForTag.as">
      <violation beginline="21" endline="21" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="28" endline="28" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="51" endline="51" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="73" endline="73" begincolumn="67" endcolumn="67" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="73" endline="73" begincolumn="87" endcolumn="87" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="127" endline="127" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="136" endline="136" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="183" endline="183" begincolumn="57" endcolumn="57" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="237" endline="237" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="19" endline="19" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 8 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="73" endline="73" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="109" endline="109" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 23 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="109" endline="109" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 16</violation>
      <violation beginline="141" endline="141" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="148" endline="148" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="183" endline="183" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 24 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="183" endline="183" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="183" endline="183" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 16</violation>
      <violation beginline="202" endline="202" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="202" endline="202" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="222" endline="222" begincolumn="0" endcolumn="38" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="ForTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Frame.as">
      <violation beginline="22" endline="22" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Frame.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="24" endline="24" begincolumn="80" endcolumn="80" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Frame.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="33" endline="33" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html" class="Frame.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="53" endline="53" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Frame.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Frame.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_layers). 
        </violation>
      <violation beginline="24" endline="24" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.view.html" class="Frame.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Frame.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/com/company/project/controller/GameController.as">
      <violation beginline="12" endline="12" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="GameController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="12" endline="12" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="com.company.project.controller" class="GameController.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="17" endline="17" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="GameController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="17" endline="17" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="com.company.project.controller" class="GameController.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="19" endline="19" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="com.company.project.controller" class="GameController.as" externalInfoUrl="" priority="3">This variable (view) is not used. 
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="com.company.project.controller" class="GameController.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/com/company/project/view/game/GameRenderer.as">
      <violation beginline="22" endline="22" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="GameRenderer.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="com.company.project.view.game" class="GameRenderer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/HTMLRenderer.as">
      <violation beginline="22" endline="22" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html" class="HTMLRenderer.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="22" endline="22" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html" class="HTMLRenderer.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="HTMLRenderer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="HTMLRenderer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/History.as">
      <violation beginline="34" endline="34" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view.html" class="History.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="6" endline="6" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html" class="History.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 7 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="8" endline="8" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.AvoidUsingPublicStaticField" ruleset="Maintanability Rules" package="framework.view.html" class="History.as" externalInfoUrl="" priority="3">If this field (HISTORY_UPDATED) was meant to be a constant, make it constant. Otherwise, if it is used as a global variable, you may want to redesign this class</violation>
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="History.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_history). 
        </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="History.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="History.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/commands/ICommand.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.commands" class="ICommand.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/adapters/JSONAdapter.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.adapters" class="JSONAdapter.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/net/Job.as">
      <violation beginline="78" endline="78" begincolumn="46" endcolumn="46" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.net" class="Job.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="15" endline="15" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.net" class="Job.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_assets). 
        </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.net" class="Job.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Layer.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Layer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/events/ListenerManager.as">
      <violation beginline="18" endline="18" begincolumn="96" endcolumn="96" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="1">This parameter (priority) of this function is not used. 
      </violation>
      <violation beginline="18" endline="18" begincolumn="114" endcolumn="114" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="1">This parameter (useWeakReference) of this function is not used. 
      </violation>
      <violation beginline="7" endline="7" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_events). 
        </violation>
      <violation beginline="18" endline="18" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="22" endline="22" begincolumn="0" endcolumn="30" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="37" endline="37" begincolumn="0" endcolumn="30" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="47" endline="47" begincolumn="0" endcolumn="35" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="66" endline="66" begincolumn="0" endcolumn="35" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="85" endline="85" begincolumn="0" endcolumn="30" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.events" class="ListenerManager.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Location.as">
      <violation beginline="29" endline="29" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Location.as" externalInfoUrl="" priority="1">This parameter (url) of this function is not used. 
      </violation>
      <violation beginline="50" endline="50" begincolumn="28" endcolumn="28" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Location.as" externalInfoUrl="" priority="1">This parameter (url) of this function is not used. 
      </violation>
      <violation beginline="178" endline="178" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Location.as" externalInfoUrl="" priority="1">This private method (onCompleteHandler) does not seem to be used. 
      </violation>
      <violation beginline="7" endline="7" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html" class="Location.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 9 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Location.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/Main.as">
      <violation beginline="26" endline="26" begincolumn="3" endcolumn="3" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="" class="Main.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/miniHTML/MiniHTML.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.miniHTML" class="MiniHTML.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="317" endline="317" begincolumn="0" endcolumn="27" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.miniHTML" class="MiniHTML.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/MiniHTMLRenderer.as">
      <violation beginline="19" endline="19" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view" class="MiniHTMLRenderer.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="19" endline="19" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view" class="MiniHTMLRenderer.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="-1" endline="-1" begincolumn="-1" endcolumn="32" rule="adobe.ac.pmd.rules.naming.PackageCase" ruleset="Naming Rules" package="framework.view" class="MiniHTMLRenderer.as" externalInfoUrl="" priority="3">A package name should be lower case (framework.view.renderers.miniHTML). Detects when a package definition contains upper case characters</violation>
      <violation beginline="-1" endline="-1" begincolumn="-1" endcolumn="32" rule="adobe.ac.pmd.rules.naming.PackageCase" ruleset="Naming Rules" package="framework.view" class="MiniHTMLRenderer.as" externalInfoUrl="" priority="3">A package name should be lower case (framework.view.renderers.miniHTML). Detects when a package definition contains upper case characters</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view" class="MiniHTMLRenderer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view" class="MiniHTMLRenderer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/controller/MissingController.as">
      <violation beginline="19" endline="19" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.controller" class="MissingController.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.controller" class="MissingController.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="3" endline="3" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.style.ImportFromSamePackage" ruleset="Style Rules" package="framework.controller" class="MissingController.as" externalInfoUrl="" priority="5">Imports from the same package are not necessary. </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/ModelBase.as">
      <violation beginline="11" endline="11" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.DynamicClass" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">A class must not be dynamic. When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult</violation>
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="24" endline="24" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="25" endline="25" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="31" endline="31" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="66" endline="66" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="90" endline="90" begincolumn="65" endcolumn="65" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="106" endline="106" begincolumn="64" endcolumn="64" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="240" endline="240" begincolumn="28" endcolumn="28" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="242" endline="242" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="312" endline="312" begincolumn="60" endcolumn="60" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="312" endline="312" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="325" endline="325" begincolumn="63" endcolumn="63" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="325" endline="325" begincolumn="63" endcolumn="63" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">This parameter (result) of this function is not used. 
      </violation>
      <violation beginline="325" endline="325" begincolumn="54" endcolumn="54" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="361" endline="361" begincolumn="45" endcolumn="45" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="361" endline="361" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="364" endline="364" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="365" endline="365" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="395" endline="395" begincolumn="59" endcolumn="59" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="395" endline="395" begincolumn="51" endcolumn="51" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="409" endline="409" begincolumn="51" endcolumn="51" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="417" endline="417" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="426" endline="426" begincolumn="67" endcolumn="67" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="426" endline="426" begincolumn="46" endcolumn="46" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="11" endline="11" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 16 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="11" endline="11" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 27 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="11" endline="11" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 10 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="14" endline="14" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.AvoidUsingPublicStaticField" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">If this field (models) was meant to be a constant, make it constant. Otherwise, if it is used as a global variable, you may want to redesign this class</violation>
      <violation beginline="17" endline="17" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (errors). 
        </violation>
      <violation beginline="31" endline="31" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 2 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="120" endline="120" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="171" endline="171" begincolumn="6" endcolumn="6" rule="adobe.ac.pmd.rules.empty.EmptyIfStmt" ruleset="Empty statement Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">No statements in this if statement. Empty If Statement finds instances where a condition is checked but nothing is done about it. </violation>
      <violation beginline="302" endline="302" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'</violation>
      <violation beginline="363" endline="363" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.PropertyHiddenByLocalVariable" ruleset="Naming Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">A class property is hidden by this local variable (errors)</violation>
      <violation beginline="371" endline="371" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="371" endline="371" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="375" endline="375" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="378" endline="378" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model" class="ModelBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/events/ModelEvent.as">
      <violation beginline="10" endline="10" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.events" class="ModelEvent.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="12" endline="12" begincolumn="44" endcolumn="44" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.events" class="ModelEvent.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="10" endline="10" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.event.PublicVariableInCustomEvent" ruleset="Event Rules" package="framework.events" class="ModelEvent.as" externalInfoUrl="" priority="3">No public variables should be inside a custom event. This variable (message) is public. In order to improve encapsulation in your custom event, it is better not to have public variable in your event. Prefer having read-only attributes, set by the event constructor</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.events" class="ModelEvent.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/Models.as">
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="12" endline="12" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="13" endline="13" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="38" endline="38" begincolumn="0" endcolumn="43" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="Event Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="60" endline="60" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="109" endline="109" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="142" endline="142" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="142" endline="142" begincolumn="63" endcolumn="63" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="144" endline="144" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="197" endline="197" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="199" endline="199" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="231" endline="231" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="231" endline="231" begincolumn="88" endcolumn="88" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="231" endline="231" begincolumn="114" endcolumn="114" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="237" endline="237" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="270" endline="270" begincolumn="39" endcolumn="39" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="270" endline="270" begincolumn="90" endcolumn="90" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="270" endline="270" begincolumn="116" endcolumn="116" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="270" endline="270" begincolumn="144" endcolumn="144" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="286" endline="286" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="286" endline="286" begincolumn="89" endcolumn="89" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="286" endline="286" begincolumn="115" endcolumn="115" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="286" endline="286" begincolumn="143" endcolumn="143" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="298" endline="298" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="300" endline="300" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="318" endline="318" begincolumn="16" endcolumn="16" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="332" endline="332" begincolumn="75" endcolumn="75" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="353" endline="353" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="363" endline="363" begincolumn="41" endcolumn="41" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="392" endline="392" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="8" endline="8" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 18 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="8" endline="8" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 20 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="8" endline="8" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 8 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="16" endline="16" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_associations). 
        </violation>
      <violation beginline="18" endline="18" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_loadingQue). 
        </violation>
      <violation beginline="24" endline="24" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="142" endline="142" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 11</violation>
      <violation beginline="231" endline="231" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 6 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="270" endline="270" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 6 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="286" endline="286" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 6 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="377" endline="377" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="201" endline="201" begincolumn="0" endcolumn="24" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="317" endline="317" begincolumn="0" endcolumn="24" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.model" class="Models.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Navigator.as">
      <violation beginline="46" endline="46" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html" class="Navigator.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="50" endline="50" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html" class="Navigator.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="13" endline="13" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html" class="Navigator.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 7 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="24" endline="24" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Navigator.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (windows). 
        </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Navigator.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Node.as">
      <violation beginline="28" endline="28" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="87" endline="87" begincolumn="31" endcolumn="31" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="1">This parameter (path) of this function is not used. 
      </violation>
      <violation beginline="92" endline="92" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.EmptyPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="1">This private method (onLoadError) is used but its content is empty. 
      </violation>
      <violation beginline="92" endline="92" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="1">This private method (onLoadError) does not seem to be used. 
      </violation>
      <violation beginline="10" endline="10" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (appliedStyles). 
        </violation>
      <violation beginline="16" endline="16" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="35" endline="35" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="35" endline="35" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="6" endline="6" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.style.ImportFromSamePackage" ruleset="Style Rules" package="framework.view.html" class="Node.as" externalInfoUrl="" priority="5">Imports from the same package are not necessary. </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/utils/ObjectUtils.as">
      <violation beginline="13" endline="13" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="27" endline="27" begincolumn="57" endcolumn="57" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="27" endline="27" begincolumn="39" endcolumn="39" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="47" endline="47" begincolumn="65" endcolumn="65" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="47" endline="47" begincolumn="54" endcolumn="54" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="49" endline="49" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="52" endline="52" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="104" endline="104" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="204" endline="204" begincolumn="96" endcolumn="96" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="204" endline="204" begincolumn="72" endcolumn="72" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="206" endline="206" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="233" endline="233" begincolumn="61" endcolumn="61" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="233" endline="233" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="235" endline="235" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="260" endline="260" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="283" endline="283" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="343" endline="343" begincolumn="56" endcolumn="56" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="343" endline="343" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="345" endline="345" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="13" endline="13" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.AvoidUsingPublicStaticField" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">If this field (keywords) was meant to be a constant, make it constant. Otherwise, if it is used as a global variable, you may want to redesign this class</violation>
      <violation beginline="34" endline="34" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.empty.EmptyCatchStatement" ruleset="Empty statement Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">This catch statement is empty</violation>
      <violation beginline="47" endline="47" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 11</violation>
      <violation beginline="62" endline="62" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="62" endline="62" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="63" endline="63" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="64" endline="64" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="64" endline="64" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="100" endline="100" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 31 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="100" endline="100" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 29</violation>
      <violation beginline="117" endline="117" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="119" endline="119" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="161" endline="161" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.naming.PropertyHiddenByLocalVariable" ruleset="Naming Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">A class property is hidden by this local variable (count)</violation>
      <violation beginline="213" endline="213" begincolumn="6" endcolumn="6" rule="adobe.ac.pmd.rules.sizing.TooLongSwitchCase" ruleset="Sizing Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Long switch case detected (3 lines maximum, but 5 actually). A switch case statement should be either empty, or contain a break, or call another method</violation>
      <violation beginline="249" endline="249" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="260" endline="260" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 23 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="260" endline="260" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 29</violation>
      <violation beginline="352" endline="352" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'</violation>
      <violation beginline="360" endline="360" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="360" endline="360" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="361" endline="361" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="361" endline="361" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="366" endline="366" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="366" endline="366" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="74" endline="74" begincolumn="0" endcolumn="201" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 201 actually). </violation>
      <violation beginline="109" endline="109" begincolumn="0" endcolumn="282" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 282 actually). </violation>
      <violation beginline="186" endline="186" begincolumn="0" endcolumn="201" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 201 actually). </violation>
      <violation beginline="250" endline="250" begincolumn="0" endcolumn="211" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.utils" class="ObjectUtils.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 211 actually). </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/controller/Params.as">
      <violation beginline="14" endline="14" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.DynamicClass" ruleset="Maintanability Rules" package="framework.controller" class="Params.as" externalInfoUrl="" priority="1">A class must not be dynamic. When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.controller" class="Params.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Parser.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Parser.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="164" endline="164" begincolumn="0" endcolumn="47" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html" class="Parser.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/com/company/project/view/game/Pong.as">
      <violation beginline="9" endline="9" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.DynamicClass" ruleset="Maintanability Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">A class must not be dynamic. When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult</violation>
      <violation beginline="63" endline="63" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="71" endline="71" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="78" endline="78" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="87" endline="87" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="96" endline="96" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="106" endline="106" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="116" endline="116" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="9" endline="9" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 15 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="57" endline="57" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 48 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="12" endline="12" begincolumn="0" endcolumn="24" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="13" endline="13" begincolumn="0" endcolumn="24" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="15" endline="15" begincolumn="0" endcolumn="36" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="16" endline="16" begincolumn="0" endcolumn="35" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="17" endline="17" begincolumn="0" endcolumn="34" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="com.company.project.view.game" class="Pong.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/cache/Pool.as">
      <violation beginline="15" endline="15" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="32" endline="32" begincolumn="56" endcolumn="56" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="351" endline="351" begincolumn="0" endcolumn="53" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="Event Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="149" endline="149" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="Performance Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="211" endline="211" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="Performance Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="93" endline="93" begincolumn="0" endcolumn="16" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="143" endline="143" begincolumn="0" endcolumn="26" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="144" endline="144" begincolumn="0" endcolumn="26" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="168" endline="168" begincolumn="0" endcolumn="29" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="207" endline="207" begincolumn="0" endcolumn="16" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="231" endline="231" begincolumn="0" endcolumn="24" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="248" endline="248" begincolumn="0" endcolumn="12" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="272" endline="272" begincolumn="0" endcolumn="20" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="299" endline="299" begincolumn="0" endcolumn="26" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="300" endline="300" begincolumn="0" endcolumn="26" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="301" endline="301" begincolumn="0" endcolumn="40" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.cache" class="Pool.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/Position.as">
      <violation beginline="30" endline="30" begincolumn="58" endcolumn="58" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">This parameter (element) of this function is not used. 
      </violation>
      <violation beginline="30" endline="30" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">This parameter (parentElement) of this function is not used. 
      </violation>
      <violation beginline="52" endline="52" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="53" endline="53" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="56" endline="56" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="74" endline="74" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="91" endline="91" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="113" endline="113" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="138" endline="138" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="142" endline="142" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="149" endline="149" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="188" endline="188" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="346" endline="346" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="347" endline="347" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="349" endline="349" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="350" endline="350" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="387" endline="387" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="438" endline="438" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="1">This parameter (parentElement) of this function is not used. 
      </violation>
      <violation beginline="45" endline="45" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 153 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="45" endline="45" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 73</violation>
      <violation beginline="119" endline="119" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="119" endline="119" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="120" endline="120" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="120" endline="120" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="169" endline="169" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="169" endline="169" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="194" endline="194" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having '!condition'</violation>
      <violation beginline="197" endline="197" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having '!condition'</violation>
      <violation beginline="200" endline="200" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having '!condition'</violation>
      <violation beginline="207" endline="207" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="207" endline="207" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="350" endline="350" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="Naming Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="27" endline="27" begincolumn="0" endcolumn="244" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 244 actually). </violation>
      <violation beginline="75" endline="75" begincolumn="0" endcolumn="29" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="76" endline="76" begincolumn="0" endcolumn="28" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="170" endline="170" begincolumn="0" endcolumn="200" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 200 actually). </violation>
      <violation beginline="189" endline="189" begincolumn="0" endcolumn="222" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 222 actually). </violation>
      <violation beginline="353" endline="353" begincolumn="0" endcolumn="14" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="372" endline="372" begincolumn="0" endcolumn="201" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 201 actually). </violation>
      <violation beginline="373" endline="373" begincolumn="0" endcolumn="206" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 206 actually). </violation>
      <violation beginline="375" endline="375" begincolumn="0" endcolumn="203" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 203 actually). </violation>
      <violation beginline="376" endline="376" begincolumn="0" endcolumn="201" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 201 actually). </violation>
      <violation beginline="377" endline="377" begincolumn="0" endcolumn="206" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 206 actually). </violation>
      <violation beginline="387" endline="387" begincolumn="0" endcolumn="49" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="416" endline="416" begincolumn="0" endcolumn="201" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 201 actually). </violation>
      <violation beginline="417" endline="417" begincolumn="0" endcolumn="206" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.display" class="Position.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 206 actually). </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/Preparser.as">
      <violation beginline="12" endline="12" begincolumn="51" endcolumn="51" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="46" endline="46" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="48" endline="48" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="127" endline="127" begincolumn="55" endcolumn="55" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="127" endline="127" begincolumn="70" endcolumn="70" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="24" endline="24" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="46" endline="46" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 33 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="46" endline="46" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 31</violation>
      <violation beginline="49" endline="49" begincolumn="7" endcolumn="7" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">This variable (scopes) is not used. 
      </violation>
      <violation beginline="52" endline="52" begincolumn="7" endcolumn="7" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">This variable (index) is not used. 
      </violation>
      <violation beginline="62" endline="62" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="76" endline="76" begincolumn="7" endcolumn="7" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">This variable (tokensAfter) is not used. 
      </violation>
      <violation beginline="78" endline="78" begincolumn="7" endcolumn="7" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="Unused Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">This variable (itemIndex) is not used. 
      </violation>
      <violation beginline="85" endline="85" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="85" endline="85" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="89" endline="89" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="95" endline="95" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="95" endline="95" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view" class="Preparser.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/Pv3dRenderer.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view" class="Pv3dRenderer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/RendererBase.as">
      <violation beginline="9" endline="9" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view" class="RendererBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="30" endline="30" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view" class="RendererBase.as" externalInfoUrl="" priority="1">This parameter (target) of this function is not used. 
      </violation>
      <violation beginline="53" endline="53" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view" class="RendererBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view" class="RendererBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="9" endline="9" begincolumn="0" endcolumn="22" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view" class="RendererBase.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/adapters/SQLiteAdapter.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.adapters" class="SQLiteAdapter.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/controller/SWFAddress.as">
      <violation beginline="456" endline="456" begincolumn="0" endcolumn="28" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.controller" class="SWFAddress.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="457" endline="457" begincolumn="0" endcolumn="45" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.controller" class="SWFAddress.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="479" endline="479" begincolumn="0" endcolumn="37" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.controller" class="SWFAddress.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/controller/SWFAddressEvent.as">
      <violation beginline="32" endline="32" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="1">This private attribute (_pathNames) does not seem to be used. 
      </violation>
      <violation beginline="33" endline="33" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="1">This private attribute (_parameterNames) does not seem to be used. 
      </violation>
      <violation beginline="34" endline="34" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="34" endline="34" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="1">This private attribute (_parameters) does not seem to be used. 
      </violation>
      <violation beginline="48" endline="48" begincolumn="54" endcolumn="54" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="62" endline="62" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="32" endline="32" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_pathNames). 
        </violation>
      <violation beginline="33" endline="33" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_parameterNames). 
        </violation>
      <violation beginline="55" endline="55" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.maintanability.UselessOverridenFunction" ruleset="Maintanability Rules" package="framework.controller" class="SWFAddressEvent.as" externalInfoUrl="" priority="3">This method is empty. This should be removed (type). This function is not needed</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/graphics/Shapes.as">
      <violation beginline="33" endline="33" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="38" endline="38" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="43" endline="43" begincolumn="51" endcolumn="51" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="48" endline="48" begincolumn="51" endcolumn="51" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="53" endline="53" begincolumn="58" endcolumn="58" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="59" endline="59" begincolumn="47" endcolumn="47" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="91" endline="91" begincolumn="50" endcolumn="50" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="116" endline="116" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="147" endline="147" begincolumn="51" endcolumn="51" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="65" endline="65" begincolumn="0" endcolumn="59" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="66" endline="66" begincolumn="0" endcolumn="59" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="96" endline="96" begincolumn="0" endcolumn="59" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="97" endline="97" begincolumn="0" endcolumn="59" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="119" endline="119" begincolumn="0" endcolumn="58" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="120" endline="120" begincolumn="0" endcolumn="58" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.graphics" class="Shapes.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/StatusBar.as">
      <violation beginline="10" endline="10" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="StatusBar.as" externalInfoUrl="" priority="1">This parameter (window) of this function is not used. 
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="StatusBar.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/utils/StringUtils.as">
      <violation beginline="60" endline="60" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="65" endline="65" begincolumn="42" endcolumn="42" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="41" endline="41" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 45 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="41" endline="41" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 50 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="41" endline="41" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 6 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="119" endline="119" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it</violation>
      <violation beginline="120" endline="120" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it</violation>
      <violation beginline="173" endline="173" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (pluralRules). 
        </violation>
      <violation beginline="189" endline="189" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (singularRules). 
        </violation>
      <violation beginline="379" endline="379" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'</violation>
      <violation beginline="430" endline="430" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 12</violation>
      <violation beginline="447" endline="447" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="Performance Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="431" endline="431" begincolumn="0" endcolumn="14" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="438" endline="438" begincolumn="0" endcolumn="29" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="440" endline="440" begincolumn="0" endcolumn="32" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="441" endline="441" begincolumn="0" endcolumn="32" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="442" endline="442" begincolumn="0" endcolumn="14" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="534" endline="534" begincolumn="0" endcolumn="27" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="552" endline="552" begincolumn="0" endcolumn="27" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="657" endline="657" begincolumn="0" endcolumn="50" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="821" endline="821" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.switchrules.TooFewBrancheInSwitchStatement" ruleset="Switches Rules" package="framework.utils" class="StringUtils.as" externalInfoUrl="" priority="5">There are too few branches in this switch statement (3 minimum, but 2 actual). Switch statements are designed for complex branches, and allow branches to share treatment. Using a switch for only 2 branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/styles/Style.as">
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="13" endline="13" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="15" endline="15" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="16" endline="16" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="22" endline="22" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="26" endline="26" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="29" endline="29" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="32" endline="32" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="35" endline="35" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="38" endline="38" begincolumn="31" endcolumn="31" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="41" endline="41" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="44" endline="44" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="47" endline="47" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="68" endline="68" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="72" endline="72" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="75" endline="75" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="79" endline="79" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="82" endline="82" begincolumn="31" endcolumn="31" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="86" endline="86" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="89" endline="89" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="93" endline="93" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="102" endline="102" begincolumn="32" endcolumn="32" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="107" endline="107" begincolumn="39" endcolumn="39" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="114" endline="114" begincolumn="51" endcolumn="51" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="114" endline="114" begincolumn="31" endcolumn="31" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="114" endline="114" begincolumn="41" endcolumn="41" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="128" endline="128" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="131" endline="131" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="17" endline="17" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (_filters). 
        </violation>
      <violation beginline="107" endline="107" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 2 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="141" endline="141" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="Performance Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 10, but its cyclomatic complexity was 13</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="13" endline="13" begincolumn="0" endcolumn="23" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="14" endline="14" begincolumn="0" endcolumn="23" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display.styles" class="Style.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/styles/StyleUtils.as">
      <violation beginline="29" endline="29" begincolumn="110" endcolumn="110" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="29" endline="29" begincolumn="93" endcolumn="93" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="31" endline="31" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="41" endline="41" begincolumn="52" endcolumn="52" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="41" endline="41" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="43" endline="43" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="61" endline="61" begincolumn="80" endcolumn="80" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="61" endline="61" begincolumn="63" endcolumn="63" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="68" endline="68" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.naming.WronglyNamedVariable" ruleset="Naming Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="3">This variable (tempW) seems to be incorrectly named. Let your creativity flow</violation>
      <violation beginline="69" endline="69" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.naming.WronglyNamedVariable" ruleset="Naming Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="3">This variable (tempH) seems to be incorrectly named. Let your creativity flow</violation>
      <violation beginline="70" endline="70" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="71" endline="71" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display.styles" class="StyleUtils.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/TagsBase.as">
      <violation beginline="12" endline="12" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="TagsBase.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="TagsBase.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="7" endline="7" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.style.ImportFromSamePackage" ruleset="Style Rules" package="framework.view.html" class="TagsBase.as" externalInfoUrl="" priority="5">Imports from the same package are not necessary. </violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/display/Text.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.display" class="Text.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="98" endline="98" begincolumn="0" endcolumn="24" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Text.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="196" endline="196" begincolumn="0" endcolumn="48" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Text.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="239" endline="239" begincolumn="0" endcolumn="32" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Text.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="240" endline="240" begincolumn="0" endcolumn="29" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Text.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="284" endline="284" begincolumn="0" endcolumn="58" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.display" class="Text.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/TextNode.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="TextNode.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/TextRenderer.as">
      <violation beginline="21" endline="21" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view" class="TextRenderer.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view" class="TextRenderer.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/commands/TextUndoCommand.as">
      <violation beginline="8" endline="8" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.model.commands" class="TextUndoCommand.as" externalInfoUrl="" priority="1">This private method (TextCommand) does not seem to be used. 
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.commands" class="TextUndoCommand.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/utils/Tracking.as">
      <violation beginline="13" endline="13" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Tracking.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="18" endline="18" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Tracking.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="23" endline="23" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Tracking.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="23" endline="23" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.utils" class="Tracking.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.utils" class="Tracking.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/utils/TypeUtils.as">
      <violation beginline="10" endline="10" begincolumn="39" endcolumn="39" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="TypeUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="23" endline="23" begincolumn="54" endcolumn="54" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="TypeUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="84" endline="84" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="TypeUtils.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="33" endline="33" begincolumn="7" endcolumn="7" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="Performance Rules" package="framework.utils" class="TypeUtils.as" externalInfoUrl="" priority="3">Nested if statements are not a good design</violation>
      <violation beginline="79" endline="79" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.utils" class="TypeUtils.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'</violation>
      <violation beginline="87" endline="87" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.utils" class="TypeUtils.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.utils" class="TypeUtils.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/net/URI.as">
      <violation beginline="14" endline="14" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.net" class="URI.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="26" endline="26" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.net" class="URI.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="6" endline="6" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.net" class="URI.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 8 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="21" endline="21" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="Performance Rules" package="framework.net" class="URI.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 4 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.net" class="URI.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/com/company/project/model/User.as">
      <violation beginline="7" endline="7" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.maintanability.DynamicClass" ruleset="Maintanability Rules" package="com.company.project.model" class="User.as" externalInfoUrl="" priority="1">A class must not be dynamic. When using dynamic classes, you cannot control how the developer will use your class. It makes refactoring really difficult</violation>
      <violation beginline="11" endline="11" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.model" class="User.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="com.company.project.model" class="User.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/com/company/project/controller/UsersController.as">
      <violation beginline="16" endline="16" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="16" endline="16" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="22" endline="22" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="28" endline="28" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="28" endline="28" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="33" endline="33" begincolumn="25" endcolumn="25" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="39" endline="39" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="51" endline="51" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="65" endline="65" begincolumn="26" endcolumn="26" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="9" endline="9" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.style.ConstructorNonEmptyReturnType" ruleset="Style Rules" package="com.company.project.controller" class="UsersController.as" externalInfoUrl="" priority="5">A constructor should not have a return type. Even if this is syntactically correct, there should not be a return type for a constructor</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/utils/Validate.as">
      <violation beginline="31" endline="31" begincolumn="83" endcolumn="83" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="31" endline="31" begincolumn="62" endcolumn="62" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="31" endline="31" begincolumn="62" endcolumn="62" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">This parameter (params) of this function is not used. 
      </violation>
      <violation beginline="31" endline="31" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="31" endline="31" begincolumn="53" endcolumn="53" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="36" endline="36" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="50" endline="50" begincolumn="84" endcolumn="84" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="50" endline="50" begincolumn="63" endcolumn="63" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="50" endline="50" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="50" endline="50" begincolumn="54" endcolumn="54" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="52" endline="52" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="69" endline="69" begincolumn="84" endcolumn="84" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="69" endline="69" begincolumn="63" endcolumn="63" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="69" endline="69" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="69" endline="69" begincolumn="54" endcolumn="54" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="88" endline="88" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.maintanability.TrueFalseCondition" ruleset="Maintanability Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="3">This test contains a hard coded boolean value. You could remove it by having 'condition'</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.utils" class="Validate.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/tags/VideoTag.as">
      <violation beginline="26" endline="26" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="Unused Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="1">This private attribute (isLooping) does not seem to be used. 
      </violation>
      <violation beginline="63" endline="63" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="67" endline="67" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="105" endline="105" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="108" endline="108" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="112" endline="112" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="1">This private method (onPosterLoaded) does not seem to be used. 
      </violation>
      <violation beginline="117" endline="117" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="15" endline="15" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 12 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="59" endline="59" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="Sizing Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 25 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="19" endline="19" begincolumn="0" endcolumn="31" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="20" endline="20" begincolumn="0" endcolumn="27" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="89" endline="89" begincolumn="0" endcolumn="65" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
      <violation beginline="90" endline="90" begincolumn="0" endcolumn="67" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html.tags" class="VideoTag.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/events/ViewEvent.as">
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.events" class="ViewEvent.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/view/html/Window.as">
      <violation beginline="34" endline="34" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="53" endline="53" begincolumn="109" endcolumn="109" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="Maintanability Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="53" endline="53" begincolumn="131" endcolumn="131" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (replace) of this function is not used. 
      </violation>
      <violation beginline="67" endline="67" begincolumn="4" endcolumn="4" rule="adobe.ac.pmd.rules.component.AddChildNotInCreateChildren" ruleset="Custom component rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">Flex specific - You must add child only inside the createChildren method</violation>
      <violation beginline="126" endline="126" begincolumn="48" endcolumn="48" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (styleName) of this function is not used. 
      </violation>
      <violation beginline="126" endline="126" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (id) of this function is not used. 
      </violation>
      <violation beginline="146" endline="146" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (yOffset) of this function is not used. 
      </violation>
      <violation beginline="146" endline="146" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (xOffset) of this function is not used. 
      </violation>
      <violation beginline="151" endline="151" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (yPos) of this function is not used. 
      </violation>
      <violation beginline="151" endline="151" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (xPos) of this function is not used. 
      </violation>
      <violation beginline="156" endline="156" begincolumn="42" endcolumn="42" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (yOffset) of this function is not used. 
      </violation>
      <violation beginline="156" endline="156" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (xOffset) of this function is not used. 
      </violation>
      <violation beginline="161" endline="161" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (width) of this function is not used. 
      </violation>
      <violation beginline="161" endline="161" begincolumn="40" endcolumn="40" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (height) of this function is not used. 
      </violation>
      <violation beginline="166" endline="166" begincolumn="42" endcolumn="42" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (yOffset) of this function is not used. 
      </violation>
      <violation beginline="166" endline="166" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (xOffset) of this function is not used. 
      </violation>
      <violation beginline="171" endline="171" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (yPos) of this function is not used. 
      </violation>
      <violation beginline="171" endline="171" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.unused.UnusedParameter" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This parameter (xPos) of this function is not used. 
      </violation>
      <violation beginline="399" endline="399" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This private method (instalize) does not seem to be used. 
      </violation>
      <violation beginline="418" endline="418" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="Unused Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="1">This private method (onLocationChange) does not seem to be used. 
      </violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="Sizing Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="3">Too much public fields or functions detected (10 maximum, but 32 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="Sizing Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 21 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="Sizing Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 18 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="28" endline="28" begincolumn="14" endcolumn="14" rule="adobe.ac.pmd.rules.maintanability.ArrayFieldWithNoArrayElementType" ruleset="Maintanability Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="3">ArrayElementType metadata is not specified for this array-type field (frames). 
        </violation>
      <violation beginline="53" endline="53" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="Sizing Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 7 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together.
      </violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="12" endline="12" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.style.ImportFromSamePackage" ruleset="Style Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="5">Imports from the same package are not necessary. </violation>
      <violation beginline="388" endline="388" begincolumn="0" endcolumn="20" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.view.html" class="Window.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 1 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
   <file name="/Users/talltyler/Sites/temp/StandardFramework/src/framework/model/adapters/XMLAdapter.as">
      <violation beginline="133" endline="133" begincolumn="0" endcolumn="53" rule="adobe.ac.pmd.rules.event.DispatchHardCodedEventName" ruleset="Event Rules" package="framework.model.adapters" class="XMLAdapter.as" externalInfoUrl="" priority="1">DispatchEvent function must dispatch constant strings. You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="-1" endline="-1" begincolumn="0" endcolumn="0" rule="adobe.ac.pmd.rules.style.CopyrightMissing" ruleset="Style Rules" package="framework.model.adapters" class="XMLAdapter.as" externalInfoUrl="" priority="5">The copyright header is missing in this file</violation>
      <violation beginline="15" endline="15" begincolumn="0" endcolumn="1728" rule="adobe.ac.pmd.rules.style.OverLongLine" ruleset="Style Rules" package="framework.model.adapters" class="XMLAdapter.as" externalInfoUrl="" priority="5">Too long line (200 maximum, but 1728 actually). </violation>
      <violation beginline="92" endline="92" begincolumn="0" endcolumn="38" rule="adobe.ac.pmd.rules.naming.TooShortVariable" ruleset="Naming Rules" package="framework.model.adapters" class="XMLAdapter.as" externalInfoUrl="" priority="5">This variable name is too short (3 characters minimum, but 2 actually). Detects when a field, local, or parameter has a very short name</violation>
   </file>
</pmd>
